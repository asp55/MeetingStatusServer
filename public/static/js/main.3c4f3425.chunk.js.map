{"version":3,"sources":["MonitorPanel.js","PersistentWebSocket.js","index.js"],"names":["new_uri","PersistentWebSocket","url","startImmediately","_url","_protocols","_persist","onclose","onerror","onmessage","onopen","start","this","_connection","WebSocket","_binaryType","binaryType","addEventListener","event","type","bubbles","cancelable","composed","relayOpenEvent","Event","dispatchEvent","closeEvent","setTimeout","wasClean","code","reason","relayCloseEvent","CloseEvent","messageEvent","data","origin","lastEventId","source","ports","relayMessageEvent","MessageEvent","relayErrorEvent","close","send","err","bufferedAmount","extensions","protocol","readyState","EventTarget","loc","window","location","ws","host","StatusPane","props","className","viewBox","preserveAspectRatio","x","y","fill","fontFamily","fontSize","fontWeight","textAnchor","dy","id","children","RoomPanel","displayStatus","info","name","status","busy","inMeeting","onClick","join","trim","MonitorPanel","useState","activeRoom","pickRoom","showRoomPicker","setShowRoomPicker","connectionStatus","setConnectionStatus","useReducer","state","message","action","rooms","length","keys","roomInfo","room","console","log","receiveMessage","_onopen","JSON","stringify","_onerror","error","_onclose","_onmessage","e","parse","parsed","raw","useEffect","removeEventListener","stop","picker","map","monitor","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3c4f3425.chunk.js","sourcesContent":["import { useState, useReducer, useEffect } from 'react';\n\nimport './MonitorPanel.scss';\nimport PersistentWebSocket from \"./PersistentWebSocket\";\n\nlet loc = window.location, new_uri;\nif (loc.protocol === \"https:\") {\n    new_uri = \"wss:\";\n} else {\n    new_uri = \"ws:\";\n}\nnew_uri += \"//\" + loc.host; \n    \nconst ws = new PersistentWebSocket(new_uri, [], false);\n\nfunction StatusPane(props) {\n  return (\n    <div className={props.className}><svg viewBox=\"0 0 1168 476\" preserveAspectRatio=\"xMidYMid meet\">\n    <text x=\"584\" y=\"238\" fill=\"white\" fontFamily=\"Barlow-SemiBold, Barlow\" fontSize=\"180\" fontWeight=\"600\" textAnchor=\"middle\">\n        <tspan dy=\".35em\" id=\"statusLabel\">{props.children}</tspan>\n    </text>\n</svg></div>\n  );\n}\n\nfunction RoomPanel(props) {\n  const {name, status} = props.info;\n\n  let displayStatus;\n  let busy = false;\n\n  if(typeof status === \"string\") {\n    displayStatus = <StatusPane className=\"status offline\">{status}</StatusPane>\n  }\n  else if(!status.inMeeting) {\n    displayStatus = <StatusPane className=\"status free\">FREE</StatusPane>\n  }\n  else {\n    busy = true;\n    displayStatus = <StatusPane className=\"status busy\">MEETING</StatusPane>\n  }\n\n  return (<div onClick={props.onClick} className={[props.className,(busy ? \" busy\" : \"\")].join(\" \").trim()}>\n    <h1>{name}</h1>\n    {displayStatus}\n  </div>);\n}\n\nfunction MonitorPanel() {\n\n  const [activeRoom, pickRoom] = useState(\"\");\n  const [showRoomPicker, setShowRoomPicker] = useState(false);\n  const [connectionStatus, setConnectionStatus] = useState(\"initializing\");\n  \n  const [rooms, receiveMessage] = useReducer((state, message)=>{\n    switch(message.action) {\n      case \"initialize\":\n        if(message.rooms.length===1) pickRoom(message.rooms[0]);\n        return {keys:message.rooms, info:message.roomInfo};\n      case \"update\":\n        state.info[message.room] = message.roomInfo;\n        return {...state};\n      default:\n        console.log(`Unsupported Action: ${message.action}`);\n        return state;\n    }\n  },{keys:[], info:{}});\n\n  \n  const _onopen = (event) => {\n    console.log(\"WebSocket is open now.\");\n    setConnectionStatus(\"initializing\");\n    ws.send(JSON.stringify({action:\"identify\",type:\"monitor\"}));\n  } \n  const _onerror = (error) => {\n    console.log(`WebSocket error: ${error}`)\n  }\n\n  const _onclose = (event) => {\n      console.log(\"WebSocket is closed now. Reconnecting in 0.5s\");\n      setConnectionStatus(\"offline\");\n      //offlinePanel();\n  }\n\n  const _onmessage = (e) => {\n      var message = JSON.parse(e.data);\n      console.log(\"Message received: \",{parsed: message, raw: e.data});\n      setConnectionStatus(\"online\");\n      receiveMessage(message);\n  }\n  \n  useEffect(()=>{\n    ws.addEventListener(\"open\", _onopen);\n    ws.addEventListener(\"error\", _onerror);\n    ws.addEventListener(\"message\", _onmessage);\n    ws.addEventListener(\"close\", _onclose);\n    ws.start();\n\n    return ()=> {\n      ws.removeEventListener(\"open\", _onopen);\n      ws.removeEventListener(\"error\", _onerror);\n      ws.removeEventListener(\"message\", _onmessage);\n      ws.removeEventListener(\"close\", _onclose);\n      ws.stop();\n    }\n  }, []);\n\n  if(connectionStatus===\"initializing\") return (\n    <div className=\"MonitorPanel\">\n      <StatusPane>Initializing...</StatusPane>\n    </div>\n  );\n  else if(connectionStatus===\"offline\") return (\n    <div className=\"MonitorPanel\">\n      <StatusPane>Offline</StatusPane>\n    </div>);\n  else {\n    //ONLINE\n    let picker = \"\";\n    if(showRoomPicker || activeRoom===\"\") {\n      picker = (<div className=\"Picker\">\n        {rooms.keys.map(id=><RoomPanel onClick={()=>{pickRoom(id);setShowRoomPicker(false);}} key={`chip-${id}`} info={rooms.info[id]} className=\"room\"/>)}\n      </div>)\n    }\n\n    let monitor = \"\";\n    if(activeRoom!==\"\" && activeRoom in rooms.info) {\n      monitor = (<RoomPanel info={rooms.info[activeRoom]} className=\"Monitor\" />);\n    }\n    \n    return (\n      <div className=\"MonitorPanel\">\n        {rooms.keys.length>1?<button onClick={()=>setShowRoomPicker(!showRoomPicker)}>Rooms</button>:\"\"}\n        {picker}\n        {monitor}\n      </div>\n    );\n  }\n}\n\nexport default MonitorPanel;\n","export default class PersistentWebSocket extends EventTarget {\n    constructor(url, protocols=[], startImmediately=true) {\n        super();\n        this._url = url;\n        this._protocols = [];\n        this._persist = true;\n\n        this.onclose = function(){};\n        this.onerror = function(){};\n        this.onmessage = function(){};\n        this.onopen = function(){};\n\n        if(startImmediately) this.start();\n    }\n\n    start() {\n        this._persist = true;\n        this._connection = new WebSocket(this._url, this._protocols);\n        if(typeof this._binaryType !== \"undefined\") this._connection.binaryType = this._binaryType;\n\n        const _onopen = (event) => {\n            const {type, bubbles, cancelable, composed} = event;\n            const relayOpenEvent = new Event(type, {bubbles: bubbles, cancelable: cancelable, composed: composed});\n            this.dispatchEvent(relayOpenEvent);\n            this.onopen(relayOpenEvent)\n        }\n\n        const _onmessage = (messageEvent) => {\n            const {type, bubbles, cancelable, composed, data, origin, lastEventId, source, ports} = messageEvent;\n            const relayMessageEvent = new MessageEvent(type, {bubbles: bubbles, cancelable: cancelable, composed: composed, data: data, origin: origin, lastEventId: lastEventId, source: source, ports: ports});\n            this.dispatchEvent(relayMessageEvent);\n            this.onmessage(relayMessageEvent);\n        }\n\n        const _onclose = (closeEvent)=>{\n            if(this._persist) {\n                this._connection = null;\n                setTimeout(()=>{if(this._persist) this.start()}, 500);\n            }\n\n            const {type, bubbles, cancelable, composed, wasClean, code, reason} = closeEvent;\n\n            const relayCloseEvent = new CloseEvent(type, {bubbles: bubbles, cancelable: cancelable, composed: composed, wasClean: wasClean, code:code, reason:reason});\n            this.dispatchEvent(relayCloseEvent);\n            this.onclose(relayCloseEvent);\n        }\n\n        const _onerror = (event) => {\n            const {type, bubbles, cancelable, composed} = event;\n            const relayErrorEvent = new Event(type, {bubbles: bubbles, cancelable: cancelable, composed: composed});\n            \n            this.dispatchEvent(relayErrorEvent);\n            this.onerror(relayErrorEvent)\n        }\n\n        this._connection.addEventListener(\"open\", _onopen);\n        this._connection.addEventListener(\"close\", _onclose);\n        this._connection.addEventListener(\"message\", _onmessage);\n        this._connection.addEventListener(\"error\", _onerror);\n\n    }\n\n    stop() {\n        this._persist = false;\n        this._connection.close();\n    }\n\n    send(data) {\n        try {\n            this._connection.send(data);\n        }\n        catch(err) {\n            throw(err);\n        }\n    }\n\n    get binaryType() {\n        return this._connection.binaryType;\n    }\n    \n    set binaryType(type) {\n        this._binaryType = type;\n        this._connection.binaryType = type;\n    }\n    \n    get bufferedAmount() {\n        return this._connection.bufferedAmount;\n    }\n    \n    get extensions() {\n        return this._connection.extensions;\n    }\n    \n    get protocol() {\n        return this._connection.protocol;\n    }\n\n    get readyState() {\n        if(this._connection.readyState===3 && this._persist) return 4;\n        else return this._connection.readyState;\n    }\n    \n    get url() {\n        return this._connection.url;\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport MonitorPanel from './MonitorPanel';\n\nReactDOM.render(\n  <React.StrictMode>\n    <MonitorPanel />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n//import reportWebVitals from './reportWebVitals';\n//reportWebVitals();\n"],"sourceRoot":""}